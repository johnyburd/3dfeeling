{"version":3,"sources":["PersonList.js","App.js","Submit.js","Results.js","serviceWorker.js","index.js","logo.svg"],"names":["React","Component","App","className","Form","Group","controlId","Label","Control","as","size","rows","to","Button","variant","type","Submit","style","width","ProgressBar","animated","now","Results","url","height","modelColor","backgroundColor","rotate","orbitControls","Boolean","window","location","hostname","match","routing","exact","path","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"+PAGwCA,IAAMC,UCwC/BC,MA9Bf,WACE,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,cACb,yBAAKA,UAAU,QACf,4BAAQA,UAAU,cACd,kBAACC,EAAA,EAAD,KACA,kBAACA,EAAA,EAAKC,MAAN,CAAYC,UAAU,gCAClB,kBAACF,EAAA,EAAKG,MAAN,oCACA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,GAAG,WAAWC,KAAK,KAAKC,KAAK,MAC3C,kBAAC,IAAD,CAAMC,GAAG,WACT,kBAACC,EAAA,EAAD,CAAQC,QAAQ,UAAUC,KAAK,UAA/B,eAQR,yBAAKZ,UAAU,YACf,yBAAKA,UAAU,QACb,yDACA,2BAAOY,KAAK,a,iBCDPC,MAtBf,WACE,OACE,yBAAKb,UAAU,UACb,4BAAQA,UAAU,iBAAlB,4BAEA,yBAAKc,MAAO,CAAEC,MAAO,MACnB,kBAACC,EAAA,EAAD,CAAaC,UAAQ,EAACC,IAAK,KAC3B,kBAACjB,EAAA,EAAD,KACA,kBAACA,EAAA,EAAKC,MAAN,CAAYC,UAAU,gCAClB,kBAAC,IAAD,CAAMM,GAAG,YACT,kBAACC,EAAA,EAAD,CAAQC,QAAQ,UAAUC,KAAK,UAA/B,wB,yBCMGO,MArBf,WACE,OACE,yBAAKnB,UAAU,WACb,4BAAQA,UAAU,kBAChB,yBAAKA,UAAU,mBAAf,iCAEA,kBAAC,IAAD,CACCoB,IAAI,wBACJL,MAAO,IACPM,OAAQ,IACRC,WAAW,UACXC,gBAAgB,UAChBC,QAAQ,EACRC,eAAe,Q,QCRJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCNN,IAAMC,EACJ,kBAAC,IAAD,KACE,6BACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWnC,IACjC,kBAAC,IAAD,CAAOkC,KAAK,UAAUC,UAAWrB,IACjC,kBAAC,IAAD,CAAOoB,KAAK,WAAWC,UAAWf,MAIxCgB,IAASC,OAAOL,EAASM,SAASC,eAAe,SD4G3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,6EEnInBC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.d86d855d.chunk.js","sourcesContent":["import React from 'react';\nimport axios from 'axios';\n\nexport default class PersonList extends React.Component {\n  state = {\n    persons: []\n  }\n\n  componentDidMount() {\n    axios.get(`https://jsonplaceholder.typicode.com/users`)\n      .then(res => {\n        const persons = res.data;\n        this.setState({ persons });\n      })\n  }\n\n  render() {\n    return (\n      <ul>\n        { this.state.persons.map(person => <li>{person.name}</li>)}\n      </ul>\n    )\n  }\n}\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport { Link } from 'react-router-dom'\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport {FormControl, Form, Button} from 'react-bootstrap';\n\n\nimport PersonList from './PersonList.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"background\">\n        <div className=\"item\">\n        <header className=\"App-header\">\n            <Form>\n            <Form.Group controlId=\"exampleForm.ControlTextarea1\">\n                <Form.Label>Please enter a text sample!</Form.Label>\n                <Form.Control as=\"textarea\" size=\"lg\" rows=\"6\" />\n                <Link to=\"/submit\">\n                <Button variant=\"primary\" type=\"submit\">\n                    Submit\n                </Button>\n                </Link>\n            </Form.Group>\n            </Form>\n        </header>\n        </div>\n        <div className=\"divider\" />\n        <div className=\"item\">\n          <p>Or choose a file to upload</p>\n          <input type=\"file\"/>\n        </div>\n\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","\nimport React from 'react';\nimport './Submit.css';\n\nimport { Link } from 'react-router-dom'\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport { ProgressBar } from 'react-bootstrap';\nimport {FormControl, Form, Button} from 'react-bootstrap';\n\n\nfunction Submit() {\n  return (\n    <div className=\"Submit\">\n      <header className=\"Submit-header\">\n        Thank you for submitting!\n      <div style={{ width: 400 }}>\n        <ProgressBar animated now={45} />\n        <Form>\n        <Form.Group controlId=\"exampleForm.ControlTextarea1\">\n            <Link to=\"/results\">\n            <Button variant=\"primary\" type=\"submit\">\n                Go to results\n            </Button>\n            </Link>\n        </Form.Group>\n        </Form>\n      </div>\n      </header>\n    </div>\n  );\n}\n\nexport default Submit;\n","\nimport React from 'react';\nimport './Results.css';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport STLViewer from 'stl-viewer';\n\nfunction Results() {\n  return (\n    <div className=\"Results\">\n      <header className=\"Results-header\">\n        <div className=\"Results-display\">\n        Results will be displayed here\n        <STLViewer\n        \turl='../public/testSTL.stl'\n        \twidth={400}\n        \theight={400}\n        \tmodelColor='#B92C2C'\n        \tbackgroundColor='#EAEAEA'\n        \trotate={true}\n        \torbitControls={true}\n        />\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default Results;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Submit from './Submit';\nimport Results from './Results';\n\nimport { Route, Link, BrowserRouter as Router } from 'react-router-dom'\n\nimport * as serviceWorker from './serviceWorker';\n\n\nconst routing = (\n  <Router>\n    <div>\n      <Route exact path=\"/\" component={App} />\n      <Route path=\"/submit\" component={Submit} />\n      <Route path=\"/results\" component={Results} />\n    </div>\n  </Router>\n)\nReactDOM.render(routing, document.getElementById('root'))\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";"],"sourceRoot":""}