{"version":3,"sources":["../src/ClipLoader.jsx"],"names":["propTypes","loading","bool","color","string","size","oneOfType","number","verticalAlign","ptKeys","Object","keys","getSize","animation","Circle","div","ClipLoader","props","klen","length","i","circleProps","reduce","acc","key","defaultProps"],"mappings":";;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;;;;;;;;;;;AAEA,IAAMA,YAAY;AAChBC,WAAS,oBAAUC,IADH;AAEhBC,SAAO,oBAAUC,MAFD;AAGhBC,QAAM,oBAAUC,SAAV,CAAoB,CAAE,oBAAUC,MAAZ,EAAoB,oBAAUH,MAA9B,CAApB,CAHU;AAIhBI,iBAAe,oBAAUF,SAAV,CAAoB,CAAE,oBAAUC,MAAZ,EAAoB,oBAAUH,MAA9B,CAApB;AAJC,CAAlB;;AAOA,IAAMK,SAASC,OAAOC,IAAP,CAAYX,SAAZ,CAAf;;AAEA,IAAMY,UAAU,SAAVA,OAAU;AAAA,SAAQ,OAAOP,IAAP,KAAgB,QAAhB,GAA8BA,IAA9B,UAAyCA,IAAjD;AAAA,CAAhB;;AAEA,IAAMQ,6DAAN;;AAcA,IAAMC,SAAS,2BAAOC,GAAhB,mBACK;AAAA,MAAGV,IAAH,QAAGA,IAAH;AAAA,SAAcO,QAAQP,IAAR,CAAd;AAAA,CADL,EAEM;AAAA,MAAGA,IAAH,SAAGA,IAAH;AAAA,SAAcO,QAAQP,IAAR,CAAd;AAAA,CAFN,EAIY;AAAA,MAAGF,KAAH,SAAGA,KAAH;AAAA,SAAeA,KAAf;AAAA,CAJZ,EAQc;AAAA,MAAGK,aAAH,SAAGA,aAAH;AAAA,SAAuBI,QAAQJ,aAAR,CAAvB;AAAA,CARd,EASSK,SATT,CAAN;;IAcqBG,U;;;;;;;;;;;6BASV;AAAA;;AAAA,UACCf,OADD,GACa,KAAKgB,KADlB,CACChB,OADD;;;AAGP,UAAIA,OAAJ,EAAa;AACX,YAAMgB,qBAAa,KAAKA,KAAlB,CAAN;;AAEA,YAAIjB,aAAaS,MAAjB,EAAyB;AACvB,cAAMS,OAAOT,OAAOU,MAApB;AACA,eAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIF,IAApB,EAA0BE,GAA1B,EAA+B;AAC7B,mBAAOH,MAAMR,OAAOW,CAAP,CAAN,CAAP;AACD;AACF;;AAED,YAAMC,cAAcZ,OAAOa,MAAP,CAAc,UAACC,GAAD,EAAMC,GAAN;AAAA,iBAAeA,QAAQ,SAAR,GAAoBD,GAApB,gBAC5CA,GAD4C,sBAE9CC,GAF8C,EAExC,OAAKP,KAAL,CAAWO,GAAX,CAFwC,EAAf;AAAA,SAAd,EAGhB,EAHgB,CAApB;;AAKA,eACE;AAAA;AAASP,eAAT;AACE,wCAAC,MAAD,EAAYI,WAAZ;AADF,SADF;AAKD;;AAED,aAAO,IAAP;AACD;;;;;;AAnCkBL,U,CACZhB,S,GAAYA,S;AADAgB,U,CAGZS,Y,GAAe;AACpBxB,WAAS,IADW;AAEpBE,SAAO,SAFa;AAGpBE,QAAM;AAHc,C;kBAHHW,U","file":"ClipLoader.js","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport styled, { keyframes } from 'styled-components'\n\nconst propTypes = {\n  loading: PropTypes.bool,\n  color: PropTypes.string,\n  size: PropTypes.oneOfType([ PropTypes.number, PropTypes.string ]),\n  verticalAlign: PropTypes.oneOfType([ PropTypes.number, PropTypes.string ]),\n}\n\nconst ptKeys = Object.keys(propTypes)\n\nconst getSize = size => typeof size === 'number' ? `${size}px` : size\n\nconst animation = keyframes`\n  0% {\n    transform: rotate(0deg) scale(1);\n  }\n\n  50% {\n    transform: rotate(180deg) scale(0.8);\n  }\n\n  100% {\n    transform: rotate(360deg) scale(1);\n  }\n`\n\nconst Circle = styled.div`\n  width: ${({ size }) => getSize(size)};\n  height: ${({ size }) => getSize(size)};\n  border: 2px solid;\n  border-color: ${({ color }) => color};\n  border-bottom-color: transparent;\n  border-radius: 100%;\n  background: transparent !important;\n  vertical-align: ${({ verticalAlign }) => getSize(verticalAlign)};\n  animation: ${animation} 0.75s 0s infinite linear;\n  animation-fill-mode: both;\n  display: inline-block;\n`\n\nexport default class ClipLoader extends Component {\n  static propTypes = propTypes;\n\n  static defaultProps = {\n    loading: true,\n    color: '#ffffff',\n    size: '35px',\n  }\n\n  render() {\n    const { loading } = this.props\n\n    if (loading) {\n      const props = { ...this.props }\n\n      if (propTypes && ptKeys) {\n        const klen = ptKeys.length\n        for (let i = 0; i < klen; i++) {\n          delete props[ptKeys[i]]\n        }\n      }\n\n      const circleProps = ptKeys.reduce((acc, key) => (key === 'loading' ? acc : {\n        ...acc,\n        [key]: this.props[key],\n      }), {})\n\n      return (\n        <div {...props}>\n          <Circle {...circleProps} />\n        </div>\n      )\n    }\n\n    return null\n  }\n}\n"]}