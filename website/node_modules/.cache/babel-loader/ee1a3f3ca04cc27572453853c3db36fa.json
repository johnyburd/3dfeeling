{"ast":null,"code":"'use strict';\n\nvar THREE = require('three'); //\n// STL Loader added\n//\n\n/**\n * @author aleeper / http://adamleeper.com/\n * @author mrdoob / http://mrdoob.com/\n * @author gero3 / https://github.com/gero3\n *\n * Description: A THREE loader for STL ASCII files, as created by Solidworks and other CAD programs.\n *\n * Supports both binary and ASCII encoded files, with automatic detection of type.\n *\n * Limitations:\n *  Binary decoding supports \"Magics\" color format (http://en.wikipedia.org/wiki/STL_(file_format)#Color_in_binary_STL).\n *  There is perhaps some question as to how valid it is to always assume little-endian-ness.\n *  ASCII decoding assumes file is UTF-8. Seems to work for the examples...\n *\n * Usage:\n *  var loader = new THREE.STLLoader();\n *  loader.load( './models/stl/slotted_disk.stl', function ( geometry ) {\n *    scene.add( new THREE.Mesh( geometry ) );\n *  });\n *\n * For binary STLs geometry might contain colors for vertices. To use it:\n *  // use the same code to load STL as above\n *  if (geometry.hasColors) {\n *    material = new THREE.MeshPhongMaterial({ opacity: geometry.alpha, vertexColors: THREE.VertexColors });\n *  } else { .... }\n *  var mesh = new THREE.Mesh( geometry, material );\n */\n\n\nTHREE.STLLoader = function (manager) {\n  this.manager = manager !== undefined ? manager : THREE.DefaultLoadingManager;\n};\n\nTHREE.STLLoader.prototype = {\n  constructor: THREE.STLLoader,\n  loadFromUrl: function loadFromUrl(url, onLoad, onProgress, onError) {\n    var scope = this;\n    var loader = new THREE.XHRLoader(scope.manager);\n    loader.setCrossOrigin(this.crossOrigin);\n    loader.setResponseType('arraybuffer');\n    loader.load(url, function (text) {\n      onLoad(scope.parse(text));\n    }, onProgress, onError);\n  },\n  loadFromFile: function loadFromFile(buffer, onLoad) {\n    var scope = this;\n    onLoad(scope.parse(buffer));\n  },\n  parse: function parse(data) {\n    var isBinary = function isBinary() {\n      var expect, face_size, n_faces, reader;\n      reader = new DataView(binData);\n      face_size = 32 / 8 * 3 + 32 / 8 * 3 * 3 + 16 / 8;\n      n_faces = reader.getUint32(80, true);\n      expect = 80 + 32 / 8 + n_faces * face_size;\n\n      if (expect === reader.byteLength) {\n        return true;\n      } // some binary files will have different size from expected,\n      // checking characters higher than ASCII to confirm is binary\n\n\n      var fileLength = reader.byteLength;\n\n      for (var index = 0; index < fileLength; index++) {\n        if (reader.getUint8(index, false) > 127) {\n          return true;\n        }\n      }\n\n      return false;\n    };\n\n    var binData = this.ensureBinary(data);\n    return isBinary() ? this.parseBinary(binData) : this.parseASCII(this.ensureString(data));\n  },\n  parseBinary: function parseBinary(data) {\n    var reader = new DataView(data);\n    var faces = reader.getUint32(80, true);\n    var r,\n        g,\n        b,\n        hasColors = false,\n        colors;\n    var defaultR, defaultG, defaultB, alpha; // process STL header\n    // check for default color in header (\"COLOR=rgba\" sequence).\n\n    for (var index = 0; index < 80 - 10; index++) {\n      if (reader.getUint32(index, false) == 0x434f4c4f\n      /*COLO*/\n      && reader.getUint8(index + 4) == 0x52\n      /*'R'*/\n      && reader.getUint8(index + 5) == 0x3d\n      /*'='*/\n      ) {\n          hasColors = true;\n          colors = new Float32Array(faces * 3 * 3);\n          defaultR = reader.getUint8(index + 6) / 255;\n          defaultG = reader.getUint8(index + 7) / 255;\n          defaultB = reader.getUint8(index + 8) / 255;\n          alpha = reader.getUint8(index + 9) / 255;\n        }\n    }\n\n    var dataOffset = 84;\n    var faceLength = 12 * 4 + 2;\n    var offset = 0;\n    var geometry = new THREE.BufferGeometry();\n    var vertices = new Float32Array(faces * 3 * 3);\n    var normals = new Float32Array(faces * 3 * 3);\n\n    for (var face = 0; face < faces; face++) {\n      var start = dataOffset + face * faceLength;\n      var normalX = reader.getFloat32(start, true);\n      var normalY = reader.getFloat32(start + 4, true);\n      var normalZ = reader.getFloat32(start + 8, true);\n\n      if (hasColors) {\n        var packedColor = reader.getUint16(start + 48, true);\n\n        if ((packedColor & 0x8000) === 0) {\n          // facet has its own unique color\n          r = (packedColor & 0x1f) / 31;\n          g = (packedColor >> 5 & 0x1f) / 31;\n          b = (packedColor >> 10 & 0x1f) / 31;\n        } else {\n          r = defaultR;\n          g = defaultG;\n          b = defaultB;\n        }\n      }\n\n      for (var i = 1; i <= 3; i++) {\n        var vertexstart = start + i * 12;\n        vertices[offset] = reader.getFloat32(vertexstart, true);\n        vertices[offset + 1] = reader.getFloat32(vertexstart + 4, true);\n        vertices[offset + 2] = reader.getFloat32(vertexstart + 8, true);\n        normals[offset] = normalX;\n        normals[offset + 1] = normalY;\n        normals[offset + 2] = normalZ;\n\n        if (hasColors) {\n          colors[offset] = r;\n          colors[offset + 1] = g;\n          colors[offset + 2] = b;\n        }\n\n        offset += 3;\n      }\n    }\n\n    geometry.addAttribute('position', new THREE.BufferAttribute(vertices, 3));\n    geometry.addAttribute('normal', new THREE.BufferAttribute(normals, 3));\n\n    if (hasColors) {\n      geometry.addAttribute('color', new THREE.BufferAttribute(colors, 3));\n      geometry.hasColors = true;\n      geometry.alpha = alpha;\n    }\n\n    return geometry;\n  },\n  parseASCII: function parseASCII(data) {\n    var geometry, length, normal, patternFace, patternNormal, patternVertex, result, text;\n    geometry = new THREE.Geometry();\n    patternFace = /facet([\\s\\S]*?)endfacet/g;\n\n    while ((result = patternFace.exec(data)) !== null) {\n      text = result[0];\n      patternNormal = /normal[\\s]+([\\-+]?[0-9]+\\.?[0-9]*([eE][\\-+]?[0-9]+)?)+[\\s]+([\\-+]?[0-9]*\\.?[0-9]+([eE][\\-+]?[0-9]+)?)+[\\s]+([\\-+]?[0-9]*\\.?[0-9]+([eE][\\-+]?[0-9]+)?)+/g;\n\n      while ((result = patternNormal.exec(text)) !== null) {\n        normal = new THREE.Vector3(parseFloat(result[1]), parseFloat(result[3]), parseFloat(result[5]));\n      }\n\n      patternVertex = /vertex[\\s]+([\\-+]?[0-9]+\\.?[0-9]*([eE][\\-+]?[0-9]+)?)+[\\s]+([\\-+]?[0-9]*\\.?[0-9]+([eE][\\-+]?[0-9]+)?)+[\\s]+([\\-+]?[0-9]*\\.?[0-9]+([eE][\\-+]?[0-9]+)?)+/g;\n\n      while ((result = patternVertex.exec(text)) !== null) {\n        geometry.vertices.push(new THREE.Vector3(parseFloat(result[1]), parseFloat(result[3]), parseFloat(result[5])));\n      }\n\n      length = geometry.vertices.length;\n      geometry.faces.push(new THREE.Face3(length - 3, length - 2, length - 1, normal));\n    }\n\n    geometry.computeBoundingBox();\n    geometry.computeBoundingSphere();\n    return geometry;\n  },\n  ensureString: function ensureString(buf) {\n    if (typeof buf !== 'string') {\n      var array_buffer = new Uint8Array(buf);\n      var str = '';\n\n      for (var i = 0; i < buf.byteLength; i++) {\n        str += String.fromCharCode(array_buffer[i]); // implicitly assumes little-endian\n      }\n\n      return str;\n    } else {\n      return buf;\n    }\n  },\n  ensureBinary: function ensureBinary(buf) {\n    if (typeof buf === 'string') {\n      var array_buffer = new Uint8Array(buf.length);\n\n      for (var i = 0; i < buf.length; i++) {\n        array_buffer[i] = buf.charCodeAt(i) & 0xff; // implicitly assumes little-endian\n      }\n\n      return array_buffer.buffer || array_buffer;\n    } else {\n      return buf;\n    }\n  }\n};\n\nif (typeof DataView === 'undefined') {\n  DataView = function DataView(buffer, byteOffset, byteLength) {\n    this.buffer = buffer;\n    this.byteOffset = byteOffset || 0;\n    this.byteLength = byteLength || buffer.byteLength || buffer.length;\n    this._isString = typeof buffer === 'string';\n  };\n\n  DataView.prototype = {\n    _getCharCodes: function _getCharCodes(buffer, start, length) {\n      start = start || 0;\n      length = length || buffer.length;\n      var end = start + length;\n      var codes = [];\n\n      for (var i = start; i < end; i++) {\n        codes.push(buffer.charCodeAt(i) & 0xff);\n      }\n\n      return codes;\n    },\n    _getBytes: function _getBytes(length, byteOffset, littleEndian) {\n      var result; // Handle the lack of endianness\n\n      if (littleEndian === undefined) {\n        littleEndian = this._littleEndian;\n      } // Handle the lack of byteOffset\n\n\n      if (byteOffset === undefined) {\n        byteOffset = this.byteOffset;\n      } else {\n        byteOffset = this.byteOffset + byteOffset;\n      }\n\n      if (length === undefined) {\n        length = this.byteLength - byteOffset;\n      } // Error Checking\n\n\n      if (typeof byteOffset !== 'number') {\n        throw new TypeError('DataView byteOffset is not a number');\n      }\n\n      if (length < 0 || byteOffset + length > this.byteLength) {\n        throw new Error('DataView length or (byteOffset+length) value is out of bounds');\n      }\n\n      if (this.isString) {\n        result = this._getCharCodes(this.buffer, byteOffset, byteOffset + length);\n      } else {\n        result = this.buffer.slice(byteOffset, byteOffset + length);\n      }\n\n      if (!littleEndian && length > 1) {\n        if (!(result instanceof Array)) {\n          result = Array.prototype.slice.call(result);\n        }\n\n        result.reverse();\n      }\n\n      return result;\n    },\n    // Compatibility functions on a String Buffer\n    getFloat64: function getFloat64(byteOffset, littleEndian) {\n      var b = this._getBytes(8, byteOffset, littleEndian),\n          sign = 1 - 2 * (b[7] >> 7),\n          exponent = ((b[7] << 1 & 0xff) << 3 | b[6] >> 4) - ((1 << 10) - 1),\n          // Binary operators such as | and << operate on 32 bit values, using + and Math.pow(2) instead\n      mantissa = (b[6] & 0x0f) * Math.pow(2, 48) + b[5] * Math.pow(2, 40) + b[4] * Math.pow(2, 32) + b[3] * Math.pow(2, 24) + b[2] * Math.pow(2, 16) + b[1] * Math.pow(2, 8) + b[0];\n\n      if (exponent === 1024) {\n        if (mantissa !== 0) {\n          return NaN;\n        } else {\n          return sign * Infinity;\n        }\n      }\n\n      if (exponent === -1023) {\n        // Denormalized\n        return sign * mantissa * Math.pow(2, -1022 - 52);\n      }\n\n      return sign * (1 + mantissa * Math.pow(2, -52)) * Math.pow(2, exponent);\n    },\n    getFloat32: function getFloat32(byteOffset, littleEndian) {\n      var b = this._getBytes(4, byteOffset, littleEndian),\n          sign = 1 - 2 * (b[3] >> 7),\n          exponent = (b[3] << 1 & 0xff | b[2] >> 7) - 127,\n          mantissa = (b[2] & 0x7f) << 16 | b[1] << 8 | b[0];\n\n      if (exponent === 128) {\n        if (mantissa !== 0) {\n          return NaN;\n        } else {\n          return sign * Infinity;\n        }\n      }\n\n      if (exponent === -127) {\n        // Denormalized\n        return sign * mantissa * Math.pow(2, -126 - 23);\n      }\n\n      return sign * (1 + mantissa * Math.pow(2, -23)) * Math.pow(2, exponent);\n    },\n    getInt32: function getInt32(byteOffset, littleEndian) {\n      var b = this._getBytes(4, byteOffset, littleEndian);\n\n      return b[3] << 24 | b[2] << 16 | b[1] << 8 | b[0];\n    },\n    getUint32: function getUint32(byteOffset, littleEndian) {\n      return this.getInt32(byteOffset, littleEndian) >>> 0;\n    },\n    getInt16: function getInt16(byteOffset, littleEndian) {\n      return this.getUint16(byteOffset, littleEndian) << 16 >> 16;\n    },\n    getUint16: function getUint16(byteOffset, littleEndian) {\n      var b = this._getBytes(2, byteOffset, littleEndian);\n\n      return b[1] << 8 | b[0];\n    },\n    getInt8: function getInt8(byteOffset) {\n      return this.getUint8(byteOffset) << 24 >> 24;\n    },\n    getUint8: function getUint8(byteOffset) {\n      return this._getBytes(1, byteOffset)[0];\n    }\n  };\n}\n\nmodule.exports = THREE;","map":null,"metadata":{},"sourceType":"script"}