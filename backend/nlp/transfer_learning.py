# -*- coding: utf-8 -*-
"""simpletransformersRegression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14Y2oibJsE4_xGelqxv-ShsjO0SghSLe9
"""

import simpletransformers
from simpletransformers.classification import ClassificationModel
import pandas as pd
from sklearn.model_selection import train_test_split
import numpy as np

filename='emobank.csv'

df = pd.read_csv(filename, usecols=["text", "V", "A", "D"])
train_df, eval_df = train_test_split(df, test_size=0.1)

valence_path = "./transfer_models/valence"
arousal_path = "./transfer_models/arousal"
dominance_path = "./transfer_models/dominance"

val_args={
    'reprocess_input_data': False,
    'num_train_epochs': 5,
    'fp16': False,
    'regression': True,
    'evaluate_during_training': True,
    'output_dir': valence_path,
    'overwrite_output_dir': True,
    'save_model_every_epoch': True
}

ar_args={
    'reprocess_input_data': False,
    'num_train_epochs': 5,
    'fp16': False,
    'regression': True,
    'evaluate_during_training': True,
    'output_dir': arousal_path,
    'overwrite_output_dir': True,
    'save_model_every_epoch': True
}

dom_args={
    'reprocess_input_data': False,
    'num_train_epochs': 5,
    'fp16': False,
    'regression': True,
    'evaluate_during_training': True,
    'output_dir': dominance_path,
    'overwrite_output_dir': True,
    'save_model_every_epoch': True
}
# Create a ClassificationModel

def re_train():
    """
    Retrain models from scratch/ distilbert pretrained.
    :return:
    """
    valence_model = ClassificationModel('distilbert', 'distilbert-base-uncased', num_labels=1, use_cuda=True, cuda_device=0, args=val_args)
    arousal_model = ClassificationModel('distilbert', 'distilbert-base-uncased', num_labels=1, use_cuda=True, cuda_device=0, args=ar_args)
    dominance_model = ClassificationModel('distilbert', 'distilbert-base-uncased', num_labels=1, use_cuda=True, cuda_device=0, args=dom_args)

    # Train the model
    valence_model.train_model(train_df[["text","V"]], eval_df=eval_df[["text","V"]])
    arousal_model.train_model(train_df[["text","A"]], eval_df=eval_df[["text","A"]])
    dominance_model.train_model(train_df[["text","D"]], eval_df=eval_df[["text","D"]])

    return valence_model, arousal_model, dominance_model,

def continue_training(epochs, valence_model, arousal_model, dominance_model):
    """
    Continues training the model from whatever state they are in when passed to the function.

    :param epochs:
    :param valence_model:
    :param arousal_model:
    :param dominance_model:
    :return:
    """
    val_args['num_train_epochs'] = epochs
    ar_args['num_train_epochs'] = epochs
    dom_args['num_train_epochs'] = epochs
    valence_model.train_model(train_df[["text", "V"]], eval_df=eval_df[["text", "V"]], args=val_args)
    arousal_model.train_model(train_df[["text", "A"]], eval_df=eval_df[["text", "A"]], args=ar_args)
    dominance_model.train_model(train_df[["text", "D"]], eval_df=eval_df[["text", "D"]], args=dom_args)



def load_models():
    """
    Load model from file for prediction/ continuing training.
    :return:
    """
    valence_model = ClassificationModel('distilbert', valence_path, args=val_args)
    arousal_model = ClassificationModel('distilbert', valence_path, args=val_args)
    dominance_model = ClassificationModel('distilbert', valence_path, args=val_args)
    return valence_model, arousal_model, dominance_model



def error(predictions, truth):
  return (predictions - truth)

def mean_error(predictions, truth):
  return np.sum(predictions - truth) / predictions.shape[0]

def predict(sentence):
  print(sentence)
  v, raw_outputs = valence_model.predict([sentence])
  #a, raw_outputs = arousal_model.predict([sentence])
  #d, raw_outputs = dominance_model.predict([sentence])
  #print(v, a, d)
  #return v, a, d
  return v

def evaluate_models(valence_model, arousal_model, dominance_model):

    predictions, raw = valence_model.predict(eval_df["text"])
    truth = eval_df["V"]
    print("Mean valence error: ", mean_error(predictions, truth))

    predictions, raw = arousal_model.predict(eval_df["text"])
    truth = eval_df["A"]
    print("Mean arousal error: ", mean_error(predictions, truth))

    predictions, raw = dominance_model.predict(eval_df["text"])
    truth = eval_df["D"]
    print("Mean dominance error: ", mean_error(predictions, truth))

